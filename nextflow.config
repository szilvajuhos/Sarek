/*
 * -------------------------------------------------
 *  nf-core/sarek Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

manifest {
  name = 'nf-core/sarek'
  author = 'Maxime Garcia, Szilveszter Juhos'
  homePage = 'https://github.com/nf-core/sarek'
  description = 'An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '3.0dev'
}

// Global default params, used in configs
params {
  // Workflow flags:

  // Mandatory arguments
  input = null // No default input
  step = 'mapping' // Starts with mapping

  // Genome and references options
  genome = 'GRCh38'
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  igenomes_ignore = false
  genomes_base = null // Disabled by default
  save_reference = null // Built references not saved

  // Main options
  help = false
  no_intervals = null // Intervals will be built from the fasta file
  nucleotides_per_second = 1000.0 // Default interval size
  sentieon = null // Not using Sentieon by default
  skip_qc = null // All QC tools are used
  target_bed = false // No default TargetBED file for targeted sequencing
  tools = null // No default Variant_Calling or Annotation tools

  // Modify fastqs (trim/split)
  trim_fastq = false // No trimming
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  trim_nextseq = 0
  save_trimmed = false
  single_end = false // No single end
  split_fastq = null // Fastq files will not be split by default

  // Preprocessing
  markdup_java_options = '"-Xms4000m -Xmx7g"' // Established values for markDuplicates memory consumption, see https://github.com/SciLifeLab/Sarek/pull/689 for details
  no_gatk_spark = null // GATK Spark implementation of their tools in local mode used by default
  save_bam_mapped = null // Mapped BAMs not saved
  skip_markduplicates = null // Do not skip markDuplicates by default

  // Variant Calling
  ascat_ploidy = null // Use default value
  ascat_purity = null // Use default value
  cf_coeff = "0.015"  // default value for Control-FREEC
  cf_ploidy = "2"     // you can use 2,3,4
  cf_window = ""      // by default we are not using this in Control-FREEC
  no_gvcf = null // g.vcf are produced by HaplotypeCaller
  no_strelka_bp = null // Strelka will use Manta candidateSmallIndels if available
  pon = false // No default PON (Panel of Normals) file for GATK Mutect2 / Sentieon TNscope
  pon_index = false // No default PON index for GATK Mutect2 / Sentieon TNscope

  // Annotation
  annotate_tools = null // Only with --step annotate
  annotation_cache = null // Annotation cache disabled
  cadd_cache = null // CADD cache disabled
  cadd_indels = false // No CADD InDels file
  cadd_indels_tbi = false // No CADD InDels index
  cadd_wg_snvs = false // No CADD SNVs file
  cadd_wg_snvs_tbi = false // No CADD SNVs index
  genesplicer = null // genesplicer disabled within VEP
  snpeff_cache = null // No directory for snpEff cache
  vep_cache = null // No directory for VEP cache

  // Custom config
  config_profile_contact = false
  config_profile_description = false
  config_profile_url = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

  // Other options
  outdir = './results'
  publish_dir_mode = 'copy' // Default PublishDirMode (same as other nf-core pipelines)
  sequencing_center = null // No sequencing center to be written in BAM header in MapReads process
  multiqc_config = false
  monochrome_logs = false // Monochrome logs disabled
  email = false // No default email
  email_on_fail = false
  plaintext_email = false // Plaintext email disabled
  max_multiqc_email_size = 25.MB

  hostnames = false
  name = false // No default name
  tracedir = "${params.outdir}/pipeline_info"

  // Base specifications
  // Defaults only, expecting to be overwritten
  cpus = 8 
  max_cpus = 16
  max_memory = 128.GB
  max_time = 240.h
  single_cpu_mem = 7.GB
}

// Container slug
// Stable releases should specify release tag (ie: `2.5.2`)
// Developmental code should specify dev
process.container = 'nfcore/sarek:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/sarek custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/pipeline/sarek.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config/sarek profiles: ${params.custom_config_base}/pipeline/sarek.config")
}

profiles {
  conda {
    docker.enabled = false
    process.conda = "$baseDir/environment.yml"
    singularity.enabled = false
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker {
      enabled = true
      fixOwnership = true
    }
    singularity.enabled = false
  }
  singularity {
    docker.enabled = false
    singularity.autoMounts = true
    singularity.enabled = true
  }
  test               { includeConfig 'conf/test.config' }
  test_annotation    { includeConfig 'conf/test_annotation.config' }
  test_no_gatk_spark { includeConfig 'conf/test_no_gatk_spark.config' }
  test_split_fastq   { includeConfig 'conf/test_split_fastq.config' }
  test_targeted      { includeConfig 'conf/test_targeted.config' }
  test_tool          { includeConfig 'conf/test_tool.config' }
  test_trimming      { includeConfig 'conf/test_trimming.config' }
}

// Load genomes.config or igenomes.config
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
} else {
  includeConfig 'conf/genomes.config'
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}

// Return the minimum between requirements and a maximum limit to ensure that resource requirements don't go over
def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}
